"use client";

import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  FileTextIcon, 
  ExternalLinkIcon, 
  DownloadIcon, 
  ChevronDownIcon, 
  ChevronUpIcon,
  BuildingIcon,
  TrendingUpIcon,
  SearchIcon
} from 'lucide-react';
import { Button } from '../ui/button';
import { MarkdownText } from './markdown-text';

interface CaseStudyToolProps {
  companyDomain: string;
  summary?: any;
  allResults?: any[];
  totalFound?: number;
  searchId?: string;
  onSaveAsMarkdown?: () => void;
}

export const CaseStudyTool: React.FC<CaseStudyToolProps> = ({
  companyDomain,
  summary,
  allResults = [],
  totalFound = 0,
  searchId,
  onSaveAsMarkdown
}) => {
  const [isExpanded, setIsExpanded] = useState(true);
  const [showMarkdown, setShowMarkdown] = useState(false);
  const [markdownContent, setMarkdownContent] = useState('');

  // Generate markdown content from case study data
  useEffect(() => {
    if (summary && companyDomain) {
      const markdown = generateMarkdown(companyDomain, summary, allResults, totalFound);
      setMarkdownContent(markdown);
    }
  }, [summary, companyDomain, allResults, totalFound]);

  const generateMarkdown = (domain: string, summary: any, results: any[], total: number) => {
    const now = new Date().toISOString().split('T')[0];
    
    let md = `# Case Study Analysis: ${domain}\n\n`;
    md += `*Generated on ${now}*\n\n`;
    md += `## Summary\n\n`;
    md += `**Company:** ${domain}\n`;
    md += `**Total Results Found:** ${total}\n`;
    md += `**Analysis Status:** ✅ Success\n\n`;
    
    if (summary) {
      md += `## Top Case Study\n\n`;
      md += `### ${summary.title || 'No title'}\n\n`;
      md += `**URL:** [${summary.url || 'No URL'}](${summary.url || '#'})\n`;
      md += `**Relevance Score:** ${summary.relevance_score || 0}\n\n`;
      md += `#### Description\n`;
      md += `${summary.description || 'No description available'}\n\n`;
      
      if (summary.key_metrics && summary.key_metrics.length > 0) {
        md += `#### Key Metrics\n`;
        summary.key_metrics.forEach((metric: string) => {
          md += `- ${metric}\n`;
        });
        md += '\n';
      }
      
      if (summary.content_preview) {
        md += `#### Content Preview\n`;
        md += `${summary.content_preview}\n\n`;
      }
    }
    
    if (results.length > 0) {
      md += `## All Results\n\n`;
      md += `| Rank | Title | URL | Score |\n`;
      md += `|------|-------|-----|-------|\n`;
      
      results.slice(0, 10).forEach((result, index) => {
        const title = (result.title || 'No title').substring(0, 50);
        const url = result.url || 'No URL';
        const score = result.relevance_score || 0;
        md += `| ${index + 1} | ${title} | [${url}](${url}) | ${score} |\n`;
      });
      md += '\n';
    }
    
    md += `## Current Behavior Analysis\n\n`;
    md += `### What the tool does today\n`;
    md += `1. **Domain scoping rule** - Takes the prospect company name and prepends a site: filter\n`;
    md += `2. **Search query example:** \`${domain} case study site:${domain}.com\`\n`;
    md += `3. **Results ranking** - Ranks by recency and numeric KPI keywords\n\n`;
    md += `### Why this misidentifies stories\n`;
    md += `- Current approach finds stories where the prospect is the **vendor**, not the **customer**\n`;
    md += `- This returns "How [Company] helped..." stories instead of "[Company] as customer" stories\n`;
    md += `- Domain scoping should be flipped to rep company domain\n\n`;
    md += `### Needed Changes\n`;
    md += `1. **Domain flip** - Filter by rep company domain instead of prospect domain\n`;
    md += `2. **Negative filters** - Exclude "How [prospect] helped..." patterns\n`;
    md += `3. **Schema tweak** - Better identification of customer vs vendor stories\n`;
    md += `4. **Ranking weights** - Updated scoring for customer success stories\n`;
    md += `5. **Better metrics** - Focus on customer outcome metrics\n`;
    md += `6. **Updated tests** - Test cases for improved accuracy\n\n`;
    md += `---\n\n`;
    md += `*This analysis was generated by the Case Study Tool and can be saved as markdown for easy sharing and reference.*\n`;
    
    return md;
  };

  const handleSaveMarkdown = () => {
    if (onSaveAsMarkdown) {
      onSaveAsMarkdown();
    } else {
      // Fallback: download as file
      const blob = new Blob([markdownContent], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `case_study_${companyDomain}_${new Date().toISOString().split('T')[0]}.md`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="mb-4 w-full rounded-lg border border-slate-200 bg-white shadow-sm"
    >
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b border-slate-200">
        <div className="flex items-center gap-3">
          <div className="p-2 bg-gradient-to-r from-orange-500 to-red-500 rounded-lg">
            <BuildingIcon className="h-5 w-5 text-white" />
          </div>
          <div>
            <h3 className="font-semibold text-slate-900">Case Study Analysis</h3>
            <p className="text-sm text-slate-600">
              {companyDomain} • {totalFound} results found
            </p>
          </div>
        </div>
        
        <div className="flex items-center gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => setShowMarkdown(!showMarkdown)}
            className="flex items-center gap-2"
          >
            <FileTextIcon className="h-4 w-4" />
            {showMarkdown ? 'Hide' : 'View'} Markdown
          </Button>
          
          <Button
            variant="outline"
            size="sm"
            onClick={handleSaveMarkdown}
            className="flex items-center gap-2"
          >
            <DownloadIcon className="h-4 w-4" />
            Save as Markdown
          </Button>
          
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setIsExpanded(!isExpanded)}
          >
            {isExpanded ? <ChevronUpIcon className="h-4 w-4" /> : <ChevronDownIcon className="h-4 w-4" />}
          </Button>
        </div>
      </div>

      {/* Content */}
      <AnimatePresence>
        {isExpanded && (
          <motion.div
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: 'auto', opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.3 }}
            className="overflow-hidden"
          >
            <div className="p-4 space-y-4">
              {/* Top Result */}
              {summary && (
                <div className="bg-slate-50 rounded-lg p-4">
                  <div className="flex items-start justify-between mb-3">
                    <h4 className="font-semibold text-slate-900">Top Result</h4>
                    <div className="flex items-center gap-2 text-sm text-slate-500">
                      <TrendingUpIcon className="h-4 w-4" />
                      Score: {summary.relevance_score || 0}
                    </div>
                  </div>
                  
                  <div className="space-y-3">
                    <div>
                      <h5 className="font-medium text-slate-900 mb-1">
                        {summary.title || 'No title'}
                      </h5>
                      <p className="text-sm text-slate-600 mb-2">
                        {summary.description || 'No description available'}
                      </p>
                      {summary.url && (
                        <a
                          href={summary.url}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="inline-flex items-center gap-1 text-sm text-blue-600 hover:text-blue-800"
                        >
                          View Case Study
                          <ExternalLinkIcon className="h-3 w-3" />
                        </a>
                      )}
                    </div>
                    
                    {summary.key_metrics && summary.key_metrics.length > 0 && (
                      <div className="bg-white rounded p-3 border border-slate-200">
                        <h6 className="text-sm font-medium text-slate-700 mb-2">Key Metrics:</h6>
                        <div className="space-y-1">
                          {summary.key_metrics.map((metric: string, index: number) => (
                            <div key={index} className="text-sm text-green-600">
                              • {metric}
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* All Results */}
              {allResults.length > 0 && (
                <div>
                  <h4 className="font-semibold text-slate-900 mb-3 flex items-center gap-2">
                    <SearchIcon className="h-4 w-4" />
                    All Results ({allResults.length})
                  </h4>
                  
                  <div className="space-y-2">
                    {allResults.slice(0, 5).map((result, index) => (
                      <div key={index} className="flex items-start justify-between p-3 bg-slate-50 rounded">
                        <div className="flex-1">
                          <h5 className="font-medium text-slate-900 text-sm mb-1">
                            {result.title || 'No title'}
                          </h5>
                          <p className="text-xs text-slate-600 mb-2 line-clamp-2">
                            {result.description || 'No description'}
                          </p>
                          <div className="flex items-center gap-3">
                            {result.url && (
                              <a
                                href={result.url}
                                target="_blank"
                                rel="noopener noreferrer"
                                className="inline-flex items-center gap-1 text-xs text-blue-600 hover:text-blue-800"
                              >
                                View
                                <ExternalLinkIcon className="h-3 w-3" />
                              </a>
                            )}
                            <span className="text-xs text-slate-500">
                              Score: {result.relevance_score || 0}
                            </span>
                          </div>
                        </div>
                        <div className="ml-3 text-right">
                          <span className="text-xs text-slate-400">#{index + 1}</span>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Current Behavior Analysis */}
              <div className="bg-amber-50 rounded-lg p-4 border border-amber-200">
                <h4 className="font-semibold text-amber-900 mb-2">Current Tool Behavior</h4>
                <div className="space-y-2 text-sm text-amber-800">
                  <p>
                    <strong>Domain scoping rule:</strong> Takes the prospect company name and prepends a site: filter
                  </p>
                  <p>
                    <strong>Query example:</strong> <code className="bg-amber-200 px-2 py-1 rounded text-amber-900">
                      {companyDomain} case study site:{companyDomain}.com
                    </code>
                  </p>
                  <p className="text-amber-700">
                    This approach finds stories where the prospect is the <strong>vendor</strong>, not the <strong>customer</strong>.
                  </p>
                </div>
              </div>

              {/* Markdown Preview */}
              <AnimatePresence>
                {showMarkdown && (
                  <motion.div
                    initial={{ height: 0, opacity: 0 }}
                    animate={{ height: 'auto', opacity: 1 }}
                    exit={{ height: 0, opacity: 0 }}
                    className="border-t border-slate-200 pt-4"
                  >
                    <div className="bg-slate-50 rounded-lg p-4">
                      <h4 className="font-semibold text-slate-900 mb-3">Markdown Preview</h4>
                      <div className="prose prose-sm max-w-none">
                        <MarkdownText>{markdownContent}</MarkdownText>
                      </div>
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  );
};

export default CaseStudyTool;